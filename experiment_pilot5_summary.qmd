---
title: "Experiment Pilot 5 Summary"
author: "Yetong Xu"
format: html
editor: visual
---

```{r import, message=FALSE}
#| code-fold: true


library(dplyr)
library(tidyr)
library(readxl)
library(knitr)
library(ggplot2)
library(plotly)
library(Hmisc)
library(stringr)
```

```{r}
#| code-fold: true

# Import data
pilot_data <- read_excel("Opt_Experiment_Pilot5.xlsx")

# Keep the rows from 474 to 635
pilot_data <- pilot_data[636:715, ]


# payment_pilot3 <- pilot_data[-c(3:286), ]

```

## Data Cleaning

```{r message=FALSE}
#| code-fold: true

# Remove rows with name_wug contains 'Yetong'

pilot_data <- pilot_data %>%
#  filter(!grepl("Yetong", name_wug)) %>%
  # Remove rows with missing values for all p2_q1, p2_q2, p2_q3
  #filter(!is.na(p2_q1) | !is.na(p2_q2) | !is.na(p2_q3)) %>%
  # Remove the rows with Q57 == 2
  filter((Q57 != '2.0') | (!is.na(Q57)))

# payment_pilot3 <- payment_pilot3 %>%
#   filter(!grepl("Yetong", name_wug)) %>%
#   # Remove rows with missing values for all p2_q1, p2_q2, p2_q3
#   #filter(!is.na(p2_q1) | !is.na(p2_q2) | !is.na(p2_q3)) %>%
#   # Remove the rows with Q57 == 2
#   filter((Q57 != '2.0') | (!is.na(Q57)))

# Print the shape of the cleaned data, use a sentence
print(paste("The cleaned data has", nrow(pilot_data), "rows and", ncol(pilot_data), "columns."))

#write.xlsx(payment_pilot3, "payment_pilot3.xlsx")
```

## Summary of Treatment Arms

```{r message=FALSE}
#| code-fold: true

# Use a table to show the distribution of treatment arms
pilot_data %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(count = n()) %>%
  kable(caption = "Summary of treatment arms")
```

## Summary of Assigned Family

We find that most participants, no matter which treatment arm they are in, are assigned to the *Kandinsky* family.

```{r message=FALSE}
#| code-fold: true

# pilot_data %>%
#   filter(is.na(Assigned_Family))

# Use bar plot to show Assigned_Family across different treatment arms
family_summary <- pilot_data %>%
  ggplot(aes(x = Assigned_Family, fill = Assigned_Family)) +
  geom_bar() +
  facet_grid(DefaultStatus ~ BuySignal + OverturnCondition) +
  labs(title = "Assigned Family across different treatment arms", x = "Assigned Family", y = "Count") +
  theme_minimal()

ggplotly(family_summary)
```

## Summary of Part 2

***Note:***

-   **Part 2 Q1:** There is a 10% chance that you are a wug donor and a 90% chance that you are a wug non-donor.
-   **Part 2 Q2:** There is a 50% chance that you are a wug donor and a 50% chance that you are a wug non-donor.
-   **Part 2 Q3:** There is a 90% chance that you are a wug donor and a 10% chance that you are a wug non-donor.

```{r message=FALSE}
#| code-fold: true

# Group by DefaultStatus, BuySignal, OverturnCondition, WugRole and count occurrences of Yes and No for each question
summary_p2 <- pilot_data %>%
  mutate(
    WugRole = case_when(
      str_detect(WugRole, "Wug donor") ~ "wug donor",
      str_detect(WugRole, "Wug non-donor") ~ "wug non-donor",
      TRUE ~ WugRole  # Keeps original value if no match
    )
  ) %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition, WugRole) %>%
  summarise(
    p2q1_1 = sum(p2_q1 == '1.0', na.rm = TRUE),
    p2q1_2 = sum(p2_q1 == '2.0', na.rm = TRUE),
    p2q2_1 = sum(p2_q2 == '1.0', na.rm = TRUE),
    p2q2_2 = sum(p2_q2 == '2.0', na.rm = TRUE),
    p2q3_1 = sum(p2_q3 == '1.0', na.rm = TRUE),
    p2q3_2 = sum(p2_q3 == '2.0', na.rm = TRUE),
    n_total = n()
  ) %>%
  pivot_longer(cols = starts_with("p2q"), 
               names_to = c("Question", "Response"),
               names_sep = "_",
               values_to = "Count") %>%
  mutate(
    Proportion = Count / n_total,
    ci = purrr::map2(Count, n_total, ~binom.test(.x, .y)$conf.int),
    #ci = purrr::map2(Count, n_total, ~prop.test(.x, .y)$conf.int),
    ci_lower = purrr::map_dbl(ci, 1),
    ci_upper = purrr::map_dbl(ci, 2)
  ) %>%
  select(-ci)

# Convert Response to factor for better plotting
summary_p2$Response <- factor(summary_p2$Response, levels = c("1", "2"), labels = c("Yes", "No"))
```

::: panel-tabset

### Donated, 25 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_1 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='1 token'),
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 25 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_1)
```

### Donated, 25 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_4 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 25 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_4)
```

### Donated, 75 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_2 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 75 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_2)
```

### Donated, 75 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_3 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 75 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_3)
```

### Not Donated, 25 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_4 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 25 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_4)
```

### Not Donated, 25 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_5 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 25 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_5)
```

### Not Donated, 75 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_6 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 75 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_6)
```

### Not Donated, 75 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_7 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 75 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_7)
```
:::

## Summary of Part 3

In this section, I'll show the donation rates for each treatment arm.

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
pilot_data <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate = sum(grepl("2.0", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate = sum(grepl("1.0", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_p3 <- pilot_data %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate = sum(num_donate),
    num_not_donate = sum(num_not_donate),
    
    # Calculate the donation rate
    donation_rate = num_donate / (num_donate + num_not_donate),
    
    # Calculate the confidence intervals for the donation rate
    #ci = list(prop.test(num_donate, num_donate + num_not_donate)$conf.int),
    #ci_lower = prop.test(num_donate, num_donate + num_not_donate)$conf.int[1],
    #ci_upper = prop.test(num_donate, num_donate + num_not_donate)$conf.int[2]
    
     # Calculate confidence intervals for the donation rate using binom.test()
    ci = list(binom.test(num_donate, num_donate + num_not_donate)$conf.int),
    ci_lower = ci[[1]][1],  # Extract lower bound
    ci_upper = ci[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate = round(donation_rate * 100, 2),
    ci_lower = round(ci_lower * 100, 2),
    ci_upper = round(ci_upper * 100, 2)
  ) %>%
  ungroup() %>%
  select(-ci)
```

::: panel-tabset
### Screen 1

-   1 donor, 9 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_1 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen1 = sum(grepl("2.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen1 = sum(grepl("1.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen1 <- screen_1 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen1 = sum(num_donate_screen1),
    num_not_donate_screen1 = sum(num_not_donate_screen1),
    
    # Calculate the donation rate
    donation_rate_screen1 = num_donate_screen1 / (num_donate_screen1 + num_not_donate_screen1),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen1 = list(prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),
    # ci_lower_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[1],
    # ci_upper_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[2]
    # 
    ci_screen1 = list(binom.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),
    ci_lower_screen1 = ci_screen1[[1]][1],  # Extract lower bound
    ci_upper_screen1 = ci_screen1[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen1 = round(donation_rate_screen1 * 100, 2),
    ci_lower_screen1 = round(ci_lower_screen1 * 100, 2),
    ci_upper_screen1 = round(ci_upper_screen1 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen1_plot <- ggplot(summary_screen1, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen1, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen1, ymax = ci_upper_screen1), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))

# Pivot the data so that BuySignal becomes the x-axis and donation rates are shown on the heatmap
# summary_screen1 <- summary_screen1 %>%
#   mutate(BuySignal = factor(BuySignal, levels = c("25 tokens", "75 tokens"))) %>%
#   mutate(OverturnCondition = factor(OverturnCondition, levels = c("1 token", "19 tokens")))
# 
# # Plot using ggplot2, creating a facet grid for DefaultStatus and OverturnCondition
# ggplot(summary_screen1, aes(x = BuySignal, y = donation_rate_screen1)) +
#   geom_tile(aes(fill = donation_rate_screen1), color = "white") +  # Create the heatmap tiles
#   scale_fill_gradient(low = "lightblue", high = "darkblue") +  # Gradient color scale
#   facet_grid(OverturnCondition ~ DefaultStatus, labeller = label_both) +  # Separate plots based on OverturnCondition and DefaultStatus
#   geom_text(aes(label = round(donation_rate_screen1, 2)), color = "black", size = 6) +  # Add labels on tiles
#   labs(x = "Buy Signal", y = "Donation Rate (%)", fill = "Donation Rate", 
#        title = "Heatmap of Donation Rates by BuySignal and OverturnCondition") +  # Add labels and title
#   theme_minimal() +  # Clean theme
#   ylim(0, 100) +  # Set y-axis limits
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better readability
#         axis.text = element_text(size = 8),  # Adjust size of axis text for better readability
#         strip.text = element_text(size = 8, face = "bold"),  # Adjust facet labels size and style
#         plot.title = element_text(hjust = 0.5, face = "bold"))

ggplotly(donation_rate_screen1_plot)
```

### Screen 2

-   1 donor, 9 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_2 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen2 = sum(grepl("2.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen2 = sum(grepl("1.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen2 <- screen_2 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen2 = sum(num_donate_screen2),
    num_not_donate_screen2 = sum(num_not_donate_screen2),
    
    # Calculate the donation rate
    donation_rate_screen2 = num_donate_screen2 / (num_donate_screen2 + num_not_donate_screen2),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen2 = list(prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),
    # ci_lower_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[1],
    # ci_upper_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[2]
    
    ci_screen2 = list(binom.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),
    ci_lower_screen2 = ci_screen2[[1]][1],  # Extract lower bound
    ci_upper_screen2 = ci_screen2[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen2 = round(donation_rate_screen2 * 100, 2),
    ci_lower_screen2 = round(ci_lower_screen2 * 100, 2),
    ci_upper_screen2 = round(ci_upper_screen2 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen2_plot <- ggplot(summary_screen2, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen2, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen2, ymax = ci_upper_screen2), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen2_plot)
```

### Screen 3

-   5 donors, 5 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# colnames(pilot_data)

# Create new variables to count the number of 'Donate' and 'Do not donate'
# Assuming the correct column names are 'Screen_3_donated' and 'Screen_3_notdonated'
screen_3 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen3 = sum(grepl("2.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen3 = sum(grepl("1.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()


# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen3 <- screen_3 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen3 = sum(num_donate_screen3),
    num_not_donate_screen3 = sum(num_not_donate_screen3),

    # Calculate the donation rate
    donation_rate_screen3 = num_donate_screen3 / (num_donate_screen3 + num_not_donate_screen3),

    # Calculate the confidence intervals for the donation rate
    # ci_screen3 = list(prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),
    # ci_lower_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[1],
    # ci_upper_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[2]
    
    ci_screen3 = list(binom.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),
    ci_lower_screen3 = ci_screen3[[1]][1],  # Extract lower bound
    ci_upper_screen3 = ci_screen3[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen3 = round(donation_rate_screen3 * 100, 2),
    ci_lower_screen3 = round(ci_lower_screen3 * 100, 2),
    ci_upper_screen3 = round(ci_upper_screen3 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen3_plot <- ggplot(summary_screen3, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen3, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen3, ymax = ci_upper_screen3), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen3_plot)
```

### Screen 4

-   5 donors, 5 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_4 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen4 = sum(grepl("2.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen4 = sum(grepl("1.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen4 <- screen_4 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen4 = sum(num_donate_screen4),
    num_not_donate_screen4 = sum(num_not_donate_screen4),
    
    # Calculate the donation rate
    donation_rate_screen4 = num_donate_screen4 / (num_donate_screen4 + num_not_donate_screen4),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen4 = list(prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),
    # ci_lower_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[1],
    # ci_upper_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[2]
    
    ci_screen4 = list(binom.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),
    ci_lower_screen4 = ci_screen4[[1]][1],  # Extract lower bound
    ci_upper_screen4 = ci_screen4[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen4 = round(donation_rate_screen4 * 100, 2),
    ci_lower_screen4 = round(ci_lower_screen4 * 100, 2),
    ci_upper_screen4 = round(ci_upper_screen4 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen4_plot <- ggplot(summary_screen4, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen4, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen4, ymax = ci_upper_screen4), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen4_plot)
```

### Screen 5

-   9 donors, 1 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_5 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen5 = sum(grepl("2.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen5 = sum(grepl("1.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen5 <- screen_5 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen5 = sum(num_donate_screen5),
    num_not_donate_screen5 = sum(num_not_donate_screen5),
    
    # Calculate the donation rate
    donation_rate_screen5 = num_donate_screen5 / (num_donate_screen5 + num_not_donate_screen5),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen5 = list(prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),
    # ci_lower_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[1],
    # ci_upper_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[2]
    
    ci_screen5 = list(binom.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),
    ci_lower_screen5 = ci_screen5[[1]][1],  # Extract lower bound
    ci_upper_screen5 = ci_screen5[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen5 = round(donation_rate_screen5 * 100, 2),
    ci_lower_screen5 = round(ci_lower_screen5 * 100, 2),
    ci_upper_screen5 = round(ci_upper_screen5 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen5_plot <- ggplot(summary_screen5, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen5, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen5, ymax = ci_upper_screen5), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen5_plot)
```

### Screen 6

-   9 donors, 1 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_6 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen6 = sum(grepl("2.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen6 = sum(grepl("1.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen6 <- screen_6 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen6 = sum(num_donate_screen6),
    num_not_donate_screen6 = sum(num_not_donate_screen6),
    
    # Calculate the donation rate
    donation_rate_screen6 = num_donate_screen6 / (num_donate_screen6 + num_not_donate_screen6),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen6 = list(prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),
    # ci_lower_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[1],
    # ci_upper_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[2]
    
    ci_screen6 = list(binom.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),
    ci_lower_screen6 = ci_screen6[[1]][1],  # Extract lower bound
    ci_upper_screen6 = ci_screen6[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen6 = round(donation_rate_screen6 * 100, 2),
    ci_lower_screen6 = round(ci_lower_screen6 * 100, 2),
    ci_upper_screen6 = round(ci_upper_screen6 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen6_plot <- ggplot(summary_screen6, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen6, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen6, ymax = ci_upper_screen6), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen6_plot)
```
:::

### Summary Heatmap of Part3

```{r message=FALSE}
#| code-fold: true

# Keep Part 2 and Part 3 question responses
pilot_data_filtered <- pilot_data %>%
  select(DefaultStatus, BuySignal, OverturnCondition, WugRole, p2_q1, p2_q2, p2_q3, Screen_1_donated:Screen_6_notdonated, num_donate, num_not_donate)

screen <- pilot_data_filtered %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen1 = sum(grepl("2.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen1 = sum(grepl("1.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen2 = sum(grepl("2.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen2 = sum(grepl("1.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen3 = sum(grepl("2.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen3 = sum(grepl("1.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen4 = sum(grepl("2.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen4 = sum(grepl("1.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen5 = sum(grepl("2.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen5 = sum(grepl("1.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen6 = sum(grepl("2.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen6 = sum(grepl("1.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

summary_screen <- screen %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_1_9_signal = sum(num_donate_screen1),
    num_not_donate_1_9_signal = sum(num_not_donate_screen1),
    num_donate_1_9_no_signal = sum(num_donate_screen2),
    num_not_donate_1_9_no_signal = sum(num_not_donate_screen2),
    num_donate_5_5_signal = sum(num_donate_screen3),
    num_not_donate_5_5_signal = sum(num_not_donate_screen3),
    num_donate_5_5_no_signal = sum(num_donate_screen4),
    num_not_donate_5_5_no_signal = sum(num_not_donate_screen4),
    num_donate_9_1_signal = sum(num_donate_screen5),
    num_not_donate_9_1_signal = sum(num_not_donate_screen5),
    num_donate_9_1_no_signal = sum(num_donate_screen6),
    num_not_donate_9_1_no_signal = sum(num_not_donate_screen6),
    
    # Calculate the donation rate
    per_donate_1_9_signal = num_donate_1_9_signal / (num_donate_1_9_signal + num_not_donate_1_9_signal),
    per_donate_1_9_no_signal = num_donate_1_9_no_signal / (num_donate_1_9_no_signal + num_not_donate_1_9_no_signal),
    per_donate_5_5_signal = num_donate_5_5_signal / (num_donate_5_5_signal + num_not_donate_5_5_signal),
    per_donate_5_5_no_signal = num_donate_5_5_no_signal / (num_donate_5_5_no_signal + num_not_donate_5_5_no_signal),
    per_donate_9_1_signal = num_donate_9_1_signal / (num_donate_9_1_signal + num_not_donate_9_1_signal),
    per_donate_9_1_no_signal = num_donate_9_1_no_signal / (num_donate_9_1_no_signal + num_not_donate_9_1_no_signal)
  ) %>%
  ungroup()


# Change to long format based on per_donate_1_9_sinal:per_donate_9_1_no_signal
summary_screen <- summary_screen %>%
  pivot_longer(cols = starts_with("per_donate"), names_to = "Treatment", values_to = "Donation_Rate") %>%
  mutate(
    Treatment = factor(Treatment, levels = c("per_donate_1_9_signal", "per_donate_1_9_no_signal", "per_donate_5_5_signal", "per_donate_5_5_no_signal", "per_donate_9_1_signal", "per_donate_9_1_no_signal")),
    DefaultStatus = factor(DefaultStatus, levels = c("donated", "not donated"))
  )
```

::: panel-tabset
### Weak Consent Heat Map

```{r}
#| code-fold: true

summary_weakconsent <- summary_screen %>%
  filter((OverturnCondition == "1 token"))%>%
  filter(
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_signal')|
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal')
  ) %>%
  select(DefaultStatus, BuySignal, OverturnCondition, Treatment, Donation_Rate)
```

```{r}
#| code-fold: true

ggplot(summary_weakconsent, aes(x = BuySignal, y = Treatment, fill = Donation_Rate)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  geom_text(aes(label = round(Donation_Rate, 2)), color = "black") +
  labs(title = "Heatmap of Donation Rate For Weak Consent", x = "Buy Signal", y = "Treatment", fill = "Donation Rate") +
  facet_wrap(~ DefaultStatus) +  # Create facets by DefaultStatus
  theme_minimal()
```

### Strong Consent Heat Map

```{r}
#| code-fold: true

summary_strongconsent <- summary_screen %>%
  filter((OverturnCondition == "19 tokens"))%>%
  filter(
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_signal')|
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal')
  ) %>%
  select(DefaultStatus, BuySignal, OverturnCondition, Treatment, Donation_Rate)
```

```{r}
#| code-fold: true

strong_consent_plot <- ggplot(summary_strongconsent, aes(x = BuySignal, y = Treatment, fill = Donation_Rate)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  geom_text(aes(label = round(Donation_Rate, 2)), color = "black") +
  labs(title = "Heatmap of Donation Rate For Strong Consent", x = "Buy Signal", y = "Treatment", fill = "Donation Rate") +
  facet_wrap(~ DefaultStatus) +  # Create facets by DefaultStatus
  theme_minimal()

print(strong_consent_plot)
```
:::

## Deeper Data Cleaning

In this section, we remove participants who send signals in Part 2, 1) when the DefaultStatus is donated, and they are wug donor, and 2) when the DefaultStatus is not donated, and they are wug non-donor.

```{r}
#| code-fold: true


# Create a variable to identify participants who sent signals in Part 2(any of p2_q1, p2_q2, p2_q3 is 1)
pilot_data <- pilot_data %>%
  mutate(
    wug_role = case_when(
      grepl("Wug donor", WugRole, ignore.case = TRUE) ~ "Wug donor",
      grepl("Wug non-donor", WugRole, ignore.case = TRUE) ~ "Wug non-donor",
      TRUE ~ WugRole
    )
  ) %>%
  rowwise() %>%
  mutate(
    signal_sent = ifelse(p2_q1 == "1.0" | p2_q2 == "1.0" | p2_q3 == "1.0", 1, 0)
  ) %>%
  ungroup()

# Filter out participants who sent signals in Part 2 while BuySignal is 75 tokens(Don't remove now)
# Filter out participants who sent signals in Part 2 while DefaultStatus is donated, and WugRole contains Wug donor
# Filter out participants who sent signals in Part 2 while DefaultStatus is not donated, and WugRole contains Wug non-donor
pilot_data_cleaned <- pilot_data %>%
#  filter(!(BuySignal == "75 tokens" & signal_sent == 1)) %>%
  filter(!(DefaultStatus == "donated" &
#           BuySignal == "25 tokens" &
           wug_role == "Wug donor" &
           signal_sent == 1)) %>%
  filter(!(DefaultStatus == "not donated" & 
#             BuySignal == "25 tokens" & 
             wug_role == "Wug non-donor" & 
             signal_sent == 1))

# Ouput the participants who sent signals in Part 2 while BuySignal is 75 tokens
high_cost_people <- pilot_data_cleaned %>%
   filter(BuySignal == "75 tokens" & signal_sent == 1) %>%
   select(pid, DefaultStatus, BuySignal, wug_role, p2_q1, p2_q2, p2_q3, signal_sent)

write.csv(high_cost_people, "high_cost_people.csv")

```

## Summary of Treatment Arms for Cleaned Data

```{r message=FALSE}
#| code-fold: true

# Use a table to show the distribution of treatment arms
pilot_data_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition, wug_role) %>%
  summarise(count = n()) %>%
  kable(caption = "Summary of treatment arms for Cleaned Data")
```

## Summary of Part 2 for Cleaned Data

***Note:***

-   **Part 2 Q1:** There is a 10% chance that you are a wug donor and a 90% chance that you are a wug non-donor.
-   **Part 2 Q2:** There is a 50% chance that you are a wug donor and a 50% chance that you are a wug non-donor.
-   **Part 2 Q3:** There is a 90% chance that you are a wug donor and a 10% chance that you are a wug non-donor.

```{r message=FALSE}
#| code-fold: true

# Group by DefaultStatus, BuySignal, OverturnCondition, WugRole and count occurrences of Yes and No for each question
summary_p2_cleaned <- pilot_data_cleaned %>%
  mutate(
    WugRole = case_when(
      str_detect(WugRole, "Wug donor") ~ "wug donor",
      str_detect(WugRole, "Wug non-donor") ~ "wug non-donor",
      TRUE ~ WugRole  # Keeps original value if no match
    )
  ) %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition, WugRole) %>%
  summarise(
    p2q1_1 = sum(p2_q1 == '1.0', na.rm = TRUE),
    p2q1_2 = sum(p2_q1 == '2.0', na.rm = TRUE),
    p2q2_1 = sum(p2_q2 == '1.0', na.rm = TRUE),
    p2q2_2 = sum(p2_q2 == '2.0', na.rm = TRUE),
    p2q3_1 = sum(p2_q3 == '1.0', na.rm = TRUE),
    p2q3_2 = sum(p2_q3 == '2.0', na.rm = TRUE),
    n_total = n()
  ) %>%
  pivot_longer(cols = starts_with("p2q"), 
               names_to = c("Question", "Response"),
               names_sep = "_",
               values_to = "Count") %>%
  mutate(
    Proportion = Count / n_total,
    ci = purrr::map2(Count, n_total, ~binom.test(.x, .y)$conf.int),
    #ci = purrr::map2(Count, n_total, ~prop.test(.x, .y)$conf.int),
    ci_lower = purrr::map_dbl(ci, 1),
    ci_upper = purrr::map_dbl(ci, 2)
  ) %>%
  select(-ci)

# Convert Response to factor for better plotting
summary_p2_cleaned$Response <- factor(summary_p2_cleaned$Response, levels = c("1", "2"), labels = c("Yes", "No"))
```

::: panel-tabset
### Donated, 25 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_1_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='1 token'),
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 25 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_1_cleaned)
```

### Donated, 25 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_4_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 25 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_4_cleaned)
```

### Donated, 75 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_2_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 75 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_2_cleaned)
```

### Donated, 75 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_3_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 75 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_3_cleaned)
```

### Not Donated, 25 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_4_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 25 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_4_cleaned)
```

### Not Donated, 25 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_5_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 25 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_5_cleaned)
```

### Not Donated, 75 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_6_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 75 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_6_cleaned)
```

### Not Donated, 75 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_7_cleaned <- ggplot(summary_p2_cleaned %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~WugRole, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 75 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_7_cleaned)
```
:::

## Summary of Part 3 for Cleaned Data

In this section, I'll show the donation rates for each treatment arm.

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
pilot_data_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate = sum(grepl("2.0", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate = sum(grepl("1.0", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_p3_cleaned <- pilot_data_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate = sum(num_donate),
    num_not_donate = sum(num_not_donate),
    
    # Calculate the donation rate
    donation_rate = num_donate / (num_donate + num_not_donate),
    
    # Calculate the confidence intervals for the donation rate
    #ci = list(prop.test(num_donate, num_donate + num_not_donate)$conf.int),
    #ci_lower = prop.test(num_donate, num_donate + num_not_donate)$conf.int[1],
    #ci_upper = prop.test(num_donate, num_donate + num_not_donate)$conf.int[2]
    
     # Calculate confidence intervals for the donation rate using binom.test()
    ci = list(binom.test(num_donate, num_donate + num_not_donate)$conf.int),
    ci_lower = ci[[1]][1],  # Extract lower bound
    ci_upper = ci[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate = round(donation_rate * 100, 2),
    ci_lower = round(ci_lower * 100, 2),
    ci_upper = round(ci_upper * 100, 2)
  ) %>%
  ungroup() %>%
  select(-ci)
```

::: panel-tabset
### Screen 1

-   1 donor, 9 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_1_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen1 = sum(grepl("2.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen1 = sum(grepl("1.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen1_cleaned <- screen_1_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen1 = sum(num_donate_screen1),
    num_not_donate_screen1 = sum(num_not_donate_screen1),
    
    # Calculate the donation rate
    donation_rate_screen1 = num_donate_screen1 / (num_donate_screen1 + num_not_donate_screen1),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen1 = list(prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),
    # ci_lower_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[1],
    # ci_upper_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[2]
    # 
    ci_screen1 = list(binom.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),
    ci_lower_screen1 = ci_screen1[[1]][1],  # Extract lower bound
    ci_upper_screen1 = ci_screen1[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen1 = round(donation_rate_screen1 * 100, 2),
    ci_lower_screen1 = round(ci_lower_screen1 * 100, 2),
    ci_upper_screen1 = round(ci_upper_screen1 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen1_plot_cleaned <- ggplot(summary_screen1_cleaned, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen1, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen1, ymax = ci_upper_screen1), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))

# Pivot the data so that BuySignal becomes the x-axis and donation rates are shown on the heatmap
# summary_screen1 <- summary_screen1 %>%
#   mutate(BuySignal = factor(BuySignal, levels = c("25 tokens", "75 tokens"))) %>%
#   mutate(OverturnCondition = factor(OverturnCondition, levels = c("1 token", "19 tokens")))
# 
# # Plot using ggplot2, creating a facet grid for DefaultStatus and OverturnCondition
# ggplot(summary_screen1, aes(x = BuySignal, y = donation_rate_screen1)) +
#   geom_tile(aes(fill = donation_rate_screen1), color = "white") +  # Create the heatmap tiles
#   scale_fill_gradient(low = "lightblue", high = "darkblue") +  # Gradient color scale
#   facet_grid(OverturnCondition ~ DefaultStatus, labeller = label_both) +  # Separate plots based on OverturnCondition and DefaultStatus
#   geom_text(aes(label = round(donation_rate_screen1, 2)), color = "black", size = 6) +  # Add labels on tiles
#   labs(x = "Buy Signal", y = "Donation Rate (%)", fill = "Donation Rate", 
#        title = "Heatmap of Donation Rates by BuySignal and OverturnCondition") +  # Add labels and title
#   theme_minimal() +  # Clean theme
#   ylim(0, 100) +  # Set y-axis limits
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better readability
#         axis.text = element_text(size = 8),  # Adjust size of axis text for better readability
#         strip.text = element_text(size = 8, face = "bold"),  # Adjust facet labels size and style
#         plot.title = element_text(hjust = 0.5, face = "bold"))

ggplotly(donation_rate_screen1_plot_cleaned)
```

### Screen 2

-   1 donor, 9 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_2_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen2 = sum(grepl("2.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen2 = sum(grepl("1.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen2_cleaned <- screen_2_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen2 = sum(num_donate_screen2),
    num_not_donate_screen2 = sum(num_not_donate_screen2),
    
    # Calculate the donation rate
    donation_rate_screen2 = num_donate_screen2 / (num_donate_screen2 + num_not_donate_screen2),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen2 = list(prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),
    # ci_lower_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[1],
    # ci_upper_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[2]
    
    ci_screen2 = list(binom.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),
    ci_lower_screen2 = ci_screen2[[1]][1],  # Extract lower bound
    ci_upper_screen2 = ci_screen2[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen2 = round(donation_rate_screen2 * 100, 2),
    ci_lower_screen2 = round(ci_lower_screen2 * 100, 2),
    ci_upper_screen2 = round(ci_upper_screen2 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen2_plot_cleaned <- ggplot(summary_screen2_cleaned, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen2, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen2, ymax = ci_upper_screen2), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen2_plot_cleaned)
```

### Screen 3

-   5 donors, 5 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# colnames(pilot_data)

# Create new variables to count the number of 'Donate' and 'Do not donate'
# Assuming the correct column names are 'Screen_3_donated' and 'Screen_3_notdonated'
screen_3_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen3 = sum(grepl("2.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen3 = sum(grepl("1.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()


# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen3_cleaned <- screen_3_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen3 = sum(num_donate_screen3),
    num_not_donate_screen3 = sum(num_not_donate_screen3),

    # Calculate the donation rate
    donation_rate_screen3 = num_donate_screen3 / (num_donate_screen3 + num_not_donate_screen3),

    # Calculate the confidence intervals for the donation rate
    # ci_screen3 = list(prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),
    # ci_lower_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[1],
    # ci_upper_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[2]
    
    ci_screen3 = list(binom.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),
    ci_lower_screen3 = ci_screen3[[1]][1],  # Extract lower bound
    ci_upper_screen3 = ci_screen3[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen3 = round(donation_rate_screen3 * 100, 2),
    ci_lower_screen3 = round(ci_lower_screen3 * 100, 2),
    ci_upper_screen3 = round(ci_upper_screen3 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen3_plot_cleaned <- ggplot(summary_screen3_cleaned, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen3, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen3, ymax = ci_upper_screen3), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen3_plot_cleaned)
```

### Screen 4

-   5 donors, 5 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_4_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen4 = sum(grepl("2.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen4 = sum(grepl("1.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen4_cleaned <- screen_4_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen4 = sum(num_donate_screen4),
    num_not_donate_screen4 = sum(num_not_donate_screen4),
    
    # Calculate the donation rate
    donation_rate_screen4 = num_donate_screen4 / (num_donate_screen4 + num_not_donate_screen4),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen4 = list(prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),
    # ci_lower_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[1],
    # ci_upper_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[2]
    
    ci_screen4 = list(binom.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),
    ci_lower_screen4 = ci_screen4[[1]][1],  # Extract lower bound
    ci_upper_screen4 = ci_screen4[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen4 = round(donation_rate_screen4 * 100, 2),
    ci_lower_screen4 = round(ci_lower_screen4 * 100, 2),
    ci_upper_screen4 = round(ci_upper_screen4 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen4_plot_cleaned <- ggplot(summary_screen4_cleaned, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen4, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen4, ymax = ci_upper_screen4), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen4_plot_cleaned)
```

### Screen 5

-   9 donors, 1 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_5_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen5 = sum(grepl("2.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen5 = sum(grepl("1.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen5_cleaned <- screen_5_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen5 = sum(num_donate_screen5),
    num_not_donate_screen5 = sum(num_not_donate_screen5),
    
    # Calculate the donation rate
    donation_rate_screen5 = num_donate_screen5 / (num_donate_screen5 + num_not_donate_screen5),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen5 = list(prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),
    # ci_lower_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[1],
    # ci_upper_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[2]
    
    ci_screen5 = list(binom.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),
    ci_lower_screen5 = ci_screen5[[1]][1],  # Extract lower bound
    ci_upper_screen5 = ci_screen5[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen5 = round(donation_rate_screen5 * 100, 2),
    ci_lower_screen5 = round(ci_lower_screen5 * 100, 2),
    ci_upper_screen5 = round(ci_upper_screen5 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen5_plot_cleaned <- ggplot(summary_screen5_cleaned, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen5, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen5, ymax = ci_upper_screen5), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen5_plot_cleaned)
```

### Screen 6

-   9 donors, 1 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_6_cleaned <- pilot_data_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen6 = sum(grepl("2.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen6 = sum(grepl("1.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen6_cleaned <- screen_6_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen6 = sum(num_donate_screen6),
    num_not_donate_screen6 = sum(num_not_donate_screen6),
    
    # Calculate the donation rate
    donation_rate_screen6 = num_donate_screen6 / (num_donate_screen6 + num_not_donate_screen6),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen6 = list(prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),
    # ci_lower_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[1],
    # ci_upper_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[2]
    
    ci_screen6 = list(binom.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),
    ci_lower_screen6 = ci_screen6[[1]][1],  # Extract lower bound
    ci_upper_screen6 = ci_screen6[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen6 = round(donation_rate_screen6 * 100, 2),
    ci_lower_screen6 = round(ci_lower_screen6 * 100, 2),
    ci_upper_screen6 = round(ci_upper_screen6 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen6_plot_cleaned <- ggplot(summary_screen6_cleaned, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen6, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen6, ymax = ci_upper_screen6), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen6_plot_cleaned)
```
:::

### Summary Heatmap of Part3 for Cleaned Data

```{r message=FALSE}
#| code-fold: true

# Keep Part 2 and Part 3 question responses
pilot_data_filtered_cleaned <- pilot_data_cleaned %>%
  select(DefaultStatus, BuySignal, OverturnCondition, WugRole, p2_q1, p2_q2, p2_q3, Screen_1_donated:Screen_6_notdonated, num_donate, num_not_donate)

screen_cleaned <- pilot_data_filtered_cleaned %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen1 = sum(grepl("2.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen1 = sum(grepl("1.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen2 = sum(grepl("2.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen2 = sum(grepl("1.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen3 = sum(grepl("2.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen3 = sum(grepl("1.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen4 = sum(grepl("2.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen4 = sum(grepl("1.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen5 = sum(grepl("2.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen5 = sum(grepl("1.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_screen6 = sum(grepl("2.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen6 = sum(grepl("1.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

summary_screen_cleaned <- screen_cleaned %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_1_9_signal = sum(num_donate_screen1),
    num_not_donate_1_9_signal = sum(num_not_donate_screen1),
    num_donate_1_9_no_signal = sum(num_donate_screen2),
    num_not_donate_1_9_no_signal = sum(num_not_donate_screen2),
    num_donate_5_5_signal = sum(num_donate_screen3),
    num_not_donate_5_5_signal = sum(num_not_donate_screen3),
    num_donate_5_5_no_signal = sum(num_donate_screen4),
    num_not_donate_5_5_no_signal = sum(num_not_donate_screen4),
    num_donate_9_1_signal = sum(num_donate_screen5),
    num_not_donate_9_1_signal = sum(num_not_donate_screen5),
    num_donate_9_1_no_signal = sum(num_donate_screen6),
    num_not_donate_9_1_no_signal = sum(num_not_donate_screen6),
    
    # Calculate the donation rate
    per_donate_1_9_signal = num_donate_1_9_signal / (num_donate_1_9_signal + num_not_donate_1_9_signal),
    per_donate_1_9_no_signal = num_donate_1_9_no_signal / (num_donate_1_9_no_signal + num_not_donate_1_9_no_signal),
    per_donate_5_5_signal = num_donate_5_5_signal / (num_donate_5_5_signal + num_not_donate_5_5_signal),
    per_donate_5_5_no_signal = num_donate_5_5_no_signal / (num_donate_5_5_no_signal + num_not_donate_5_5_no_signal),
    per_donate_9_1_signal = num_donate_9_1_signal / (num_donate_9_1_signal + num_not_donate_9_1_signal),
    per_donate_9_1_no_signal = num_donate_9_1_no_signal / (num_donate_9_1_no_signal + num_not_donate_9_1_no_signal)
  ) %>%
  ungroup()


# Change to long format based on per_donate_1_9_sinal:per_donate_9_1_no_signal
summary_screen_cleaned <- summary_screen_cleaned %>%
  pivot_longer(cols = starts_with("per_donate"), names_to = "Treatment", values_to = "Donation_Rate") %>%
  mutate(
    Treatment = factor(Treatment, levels = c("per_donate_1_9_signal", "per_donate_1_9_no_signal", "per_donate_5_5_signal", "per_donate_5_5_no_signal", "per_donate_9_1_signal", "per_donate_9_1_no_signal")),
    DefaultStatus = factor(DefaultStatus, levels = c("donated", "not donated"))
  )
```

::: panel-tabset
### Weak Consent Heat Map

```{r}
#| code-fold: true

summary_weakconsent_cleaned <- summary_screen_cleaned %>%
  filter((OverturnCondition == "1 token"))%>%
  filter(
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_signal')|
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal')
  ) %>%
  select(DefaultStatus, BuySignal, OverturnCondition, Treatment, Donation_Rate)
```

```{r}
#| code-fold: true

ggplot(summary_weakconsent_cleaned, aes(x = BuySignal, y = Treatment, fill = Donation_Rate)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  geom_text(aes(label = round(Donation_Rate, 2)), color = "black") +
  labs(title = "Heatmap of Donation Rate For Weak Consent", x = "Buy Signal", y = "Treatment", fill = "Donation Rate") +
  facet_wrap(~ DefaultStatus) +  # Create facets by DefaultStatus
  theme_minimal()
```

### Strong Consent Heat Map

```{r}
#| code-fold: true

summary_strongconsent_cleaned <- summary_screen_cleaned %>%
  filter((OverturnCondition == "19 tokens"))%>%
  filter(
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_5_5_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "25 tokens" & Treatment == 'per_donate_1_9_signal')|
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_9_1_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_5_5_no_signal') |
    (DefaultStatus == 'not donated' & BuySignal == "75 tokens" & Treatment == 'per_donate_1_9_no_signal')
  ) %>%
  select(DefaultStatus, BuySignal, OverturnCondition, Treatment, Donation_Rate)
```

```{r}
#| code-fold: true

strong_consent_plot_cleaned <- ggplot(summary_strongconsent_cleaned, aes(x = BuySignal, y = Treatment, fill = Donation_Rate)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  geom_text(aes(label = round(Donation_Rate, 2)), color = "black") +
  labs(title = "Heatmap of Donation Rate For Strong Consent", x = "Buy Signal", y = "Treatment", fill = "Donation Rate") +
  facet_wrap(~ DefaultStatus) +  # Create facets by DefaultStatus
  theme_minimal()

print(strong_consent_plot_cleaned)
```
:::
