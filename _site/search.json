[
  {
    "objectID": "experiment_pilot2_summary.html",
    "href": "experiment_pilot2_summary.html",
    "title": "Experiment Pilot 2 Summary",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readxl)\nlibrary(knitr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(Hmisc)\nCode\n# Import data\npilot_data &lt;- read_excel(\"Opt_Experiment_Pilot2.xlsx\")\n\n# Keep the rows from 194 to 273\npilot_data &lt;- pilot_data[194:273, ]"
  },
  {
    "objectID": "experiment_pilot2_summary.html#data-cleaning",
    "href": "experiment_pilot2_summary.html#data-cleaning",
    "title": "Experiment Pilot 2 Summary",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\n\nCode\n# Remove rows with name_wug contains 'Yetong'\n\npilot_data &lt;- pilot_data %&gt;%\n#  filter(!grepl(\"Yetong\", name_wug)) %&gt;%\n  # Remove rows with missing values for all p2_q1, p2_q2, p2_q3\n  #filter(!is.na(p2_q1) | !is.na(p2_q2) | !is.na(p2_q3)) %&gt;%\n  # Remove the rows with Q57 == 2\n  filter((Q57 != '2.0') | (!is.na(Q57)))\n\n# Print the shape of the cleaned data, use a sentence\nprint(paste(\"The cleaned data has\", nrow(pilot_data), \"rows and\", ncol(pilot_data), \"columns.\"))\n\n\n[1] \"The cleaned data has 79 rows and 135 columns.\""
  },
  {
    "objectID": "experiment_pilot2_summary.html#summary-of-treatment-arms",
    "href": "experiment_pilot2_summary.html#summary-of-treatment-arms",
    "title": "Experiment Pilot 2 Summary",
    "section": "Summary of Treatment Arms",
    "text": "Summary of Treatment Arms\n\n\nCode\n# Use a table to show the distribution of treatment arms\npilot_data %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(count = n()) %&gt;%\n  kable(caption = \"Summary of treatment arms\")\n\n\n\nSummary of treatment arms\n\n\nDefaultStatus\nBuySignal\nOverturnCondition\ncount\n\n\n\n\ndonated\n25 tokens\n1 token\n11\n\n\ndonated\n25 tokens\n19 tokens\n10\n\n\ndonated\n75 tokens\n1 token\n9\n\n\ndonated\n75 tokens\n19 tokens\n9\n\n\nnot donated\n25 tokens\n1 token\n12\n\n\nnot donated\n25 tokens\n19 tokens\n7\n\n\nnot donated\n75 tokens\n1 token\n10\n\n\nnot donated\n75 tokens\n19 tokens\n11"
  },
  {
    "objectID": "experiment_pilot2_summary.html#summary-of-assigned-family",
    "href": "experiment_pilot2_summary.html#summary-of-assigned-family",
    "title": "Experiment Pilot 2 Summary",
    "section": "Summary of Assigned Family",
    "text": "Summary of Assigned Family\nWe find that most participants, no matter which treatment arm they are in, are assigned to the Kandinsky family.\n\n\nCode\n# pilot_data %&gt;%\n#   filter(is.na(Assigned_Family))\n\n# Use bar plot to show Assigned_Family across different treatment arms\nfamily_summary &lt;- pilot_data %&gt;%\n  ggplot(aes(x = Assigned_Family, fill = Assigned_Family)) +\n  geom_bar() +\n  facet_grid(DefaultStatus ~ BuySignal + OverturnCondition) +\n  labs(title = \"Assigned Family across different treatment arms\", x = \"Assigned Family\", y = \"Count\") +\n  theme_minimal()\n\nggplotly(family_summary)"
  },
  {
    "objectID": "experiment_pilot2_summary.html#summary-of-part-2",
    "href": "experiment_pilot2_summary.html#summary-of-part-2",
    "title": "Experiment Pilot 2 Summary",
    "section": "Summary of Part 2",
    "text": "Summary of Part 2\nNote:\n\nPart 2 Q1: There is a 10% chance that you are a wug donor and a 90% chance that you are a wug non-donor.\nPart 2 Q2: There is a 50% chance that you are a wug donor and a 50% chance that you are a wug non-donor.\nPart 2 Q3: There is a 90% chance that you are a wug donor and a 10% chance that you are a wug non-donor.\n\n\n\nCode\n# Group by DefaultStatus, BuySignal, and OverturnCondition and count occurrences of Yes and No for each question\nsummary_p2 &lt;- pilot_data %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    p2q1_1 = sum(p2_q1 == '1.0', na.rm = TRUE),\n    p2q1_2 = sum(p2_q1 == '2.0', na.rm = TRUE),\n    p2q2_1 = sum(p2_q2 == '1.0', na.rm = TRUE),\n    p2q2_2 = sum(p2_q2 == '2.0', na.rm = TRUE),\n    p2q3_1 = sum(p2_q3 == '1.0', na.rm = TRUE),\n    p2q3_2 = sum(p2_q3 == '2.0', na.rm = TRUE),\n    n_total = n()\n  ) %&gt;%\n  pivot_longer(cols = starts_with(\"p2q\"), \n               names_to = c(\"Question\", \"Response\"),\n               names_sep = \"_\",\n               values_to = \"Count\") %&gt;%\n  mutate(\n    Proportion = Count / n_total,\n    ci = purrr::map2(Count, n_total, ~binom.test(.x, .y)$conf.int),\n    #ci = purrr::map2(Count, n_total, ~prop.test(.x, .y)$conf.int),\n    ci_lower = purrr::map_dbl(ci, 1),\n    ci_upper = purrr::map_dbl(ci, 2)\n  ) %&gt;%\n  select(-ci)\n\n# Convert Response to factor for better plotting\nsummary_p2$Response &lt;- factor(summary_p2$Response, levels = c(\"1\", \"2\"), labels = c(\"Yes\", \"No\"))\n\n\n\nDonated, 25 Tokens, 1 TokenDonated, 75 Tokens, 1 TokenDonated, 75 Tokens, 19 TokensNot Donated, 25 Tokens, 1 TokenNot Donated, 25 Tokens, 19 TokensNot Donated, 75 Tokens, 1 TokenNot Donated, 75 Tokens, 19 Tokens\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_1 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='donated'&\n                                     BuySignal=='25 tokens'&\n                                     OverturnCondition=='1 token'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Donated, 25 Tokens, 1 Token\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_1)\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_2 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='donated'&\n                                     BuySignal=='75 tokens'&\n                                     OverturnCondition=='1 token'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Donated, 75 Tokens, 1 Token\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_2)\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_3 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='donated'&\n                                     BuySignal=='75 tokens'&\n                                     OverturnCondition=='19 tokens'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Donated, 75 Tokens, 19 Tokens\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_3)\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_4 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='not donated'&\n                                     BuySignal=='25 tokens'&\n                                     OverturnCondition=='1 token'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Not Donated, 25 Tokens, 1 Token\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_4)\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_5 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='not donated'&\n                                     BuySignal=='25 tokens'&\n                                     OverturnCondition=='19 tokens'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Not Donated, 25 Tokens, 19 Tokens\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_5)\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_6 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='not donated'&\n                                     BuySignal=='75 tokens'&\n                                     OverturnCondition=='1 token'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Not Donated, 75 Tokens, 1 Token\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_6)\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot using ggplot2\np2_plot_7 &lt;- ggplot(summary_p2 %&gt;%\n                            filter(DefaultStatus=='not donated'&\n                                     BuySignal=='75 tokens'&\n                                     OverturnCondition=='19 tokens'), \n                          aes(x = Question, y = Proportion, fill = Response)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = \"free\", ncol = 3) +\n  labs(\n    title = \"Not Donated, 75 Tokens, 19 Tokens\",\n    x = \"Proportion of Yes and No Responses for Each Question in Part2\",\n    y = \"Proportion of Responses\"\n  ) +\n  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), \n                position = position_dodge(0.9), width = 0.25) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Yes\" = \"#00BFC4\", \"No\" = \"#F8766D\")) +\n  theme(panel.spacing = unit(1.5, \"lines\"))\n\n# Convert ggplot to plotly\nggplotly(p2_plot_7)"
  },
  {
    "objectID": "experiment_pilot2_summary.html#summary-of-part-3",
    "href": "experiment_pilot2_summary.html#summary-of-part-3",
    "title": "Experiment Pilot 2 Summary",
    "section": "Summary of Part 3",
    "text": "Summary of Part 3\nIn this section, I’ll show the donation rates for each treatment arm. The donation rate is calculated as the number of ‘Donate’ responses divided by the total number of responses for each treatment arm.\n\n\nCode\n# Create new variables to count the number of 'Donate' and 'Do not donate'\npilot_data &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate = sum(grepl(\"2.0\", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),\n    num_donate = sum(grepl(\"1.0\", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_p3 &lt;- pilot_data %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate = sum(num_donate),\n    num_not_donate = sum(num_not_donate),\n    \n    # Calculate the donation rate\n    donation_rate = num_donate / (num_donate + num_not_donate),\n    \n    # Calculate the confidence intervals for the donation rate\n    #ci = list(prop.test(num_donate, num_donate + num_not_donate)$conf.int),\n    #ci_lower = prop.test(num_donate, num_donate + num_not_donate)$conf.int[1],\n    #ci_upper = prop.test(num_donate, num_donate + num_not_donate)$conf.int[2]\n    \n     # Calculate confidence intervals for the donation rate using binom.test()\n    ci = list(binom.test(num_donate, num_donate + num_not_donate)$conf.int),\n    ci_lower = ci[[1]][1],  # Extract lower bound\n    ci_upper = ci[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate = round(donation_rate * 100, 2),\n    ci_lower = round(ci_lower * 100, 2),\n    ci_upper = round(ci_upper * 100, 2)\n  ) %&gt;%\n  ungroup() %&gt;%\n  select(-ci)\n\n# Create a bar plot using ggplot2\n# donation_rate_plot &lt;- ggplot(summary_p3, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n#   geom_bar(stat = \"identity\", position = \"dodge\") +\n#   geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.25, position = position_dodge(0.9)) +\n#   labs(\n#     title = \"Donation Rates by Treatment Arms\",\n#     x = \"Treatment Arms\",\n#     y = \"Donation Rate (%)\"\n#   ) +\n#   theme_minimal() +\n#   theme(legend.position = \"none\", \n#         axis.text.x = element_text(angle = 45, hjust = 1))\n# \n# ggplotly(donation_rate_plot)\n\n\n\nScreen 1Screen 2Screen 3Screen 4Screen 5Screen 6\n\n\n\n1 donor, 9 non-donors, with signal sent;\n\n\n\nCode\n# Create new variables to count the number of 'Donate' and 'Do not donate'\nscreen_1 &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate_screen1 = sum(grepl(\"2.0\", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_screen1 = sum(grepl(\"1.0\", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_screen1 &lt;- screen_1 %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate_screen1 = sum(num_donate_screen1),\n    num_not_donate_screen1 = sum(num_not_donate_screen1),\n    \n    # Calculate the donation rate\n    donation_rate_screen1 = num_donate_screen1 / (num_donate_screen1 + num_not_donate_screen1),\n    \n    # Calculate the confidence intervals for the donation rate\n    # ci_screen1 = list(prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),\n    # ci_lower_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[1],\n    # ci_upper_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[2]\n    # \n    ci_screen1 = list(binom.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),\n    ci_lower_screen1 = ci_screen1[[1]][1],  # Extract lower bound\n    ci_upper_screen1 = ci_screen1[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate_screen1 = round(donation_rate_screen1 * 100, 2),\n    ci_lower_screen1 = round(ci_lower_screen1 * 100, 2),\n    ci_upper_screen1 = round(ci_upper_screen1 * 100, 2)\n  ) %&gt;%\n  ungroup()\n\n# Create a bar plot using ggplot2\ndonation_rate_screen1_plot &lt;- ggplot(summary_screen1, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen1, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_errorbar(aes(ymin = ci_lower_screen1, ymax = ci_upper_screen1), width = 0.25, position = position_dodge(0.9)) +\n  labs(\n    title = \"Donation Rates by Treatment Arms\",\n    x = \"Treatment Arms\",\n    y = \"Donation Rate (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(donation_rate_screen1_plot)\n\n\n\n\n\n\n\n\n\n1 donor, 9 non-donors, without signal sent;\n\n\n\nCode\n# Create new variables to count the number of 'Donate' and 'Do not donate'\nscreen_2 &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate_screen2 = sum(grepl(\"2.0\", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_screen2 = sum(grepl(\"1.0\", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_screen2 &lt;- screen_2 %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate_screen2 = sum(num_donate_screen2),\n    num_not_donate_screen2 = sum(num_not_donate_screen2),\n    \n    # Calculate the donation rate\n    donation_rate_screen2 = num_donate_screen2 / (num_donate_screen2 + num_not_donate_screen2),\n    \n    # Calculate the confidence intervals for the donation rate\n    # ci_screen2 = list(prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),\n    # ci_lower_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[1],\n    # ci_upper_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[2]\n    \n    ci_screen2 = list(binom.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),\n    ci_lower_screen2 = ci_screen2[[1]][1],  # Extract lower bound\n    ci_upper_screen2 = ci_screen2[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate_screen2 = round(donation_rate_screen2 * 100, 2),\n    ci_lower_screen2 = round(ci_lower_screen2 * 100, 2),\n    ci_upper_screen2 = round(ci_upper_screen2 * 100, 2)\n  ) %&gt;%\n  ungroup()\n\n# Create a bar plot using ggplot2\ndonation_rate_screen2_plot &lt;- ggplot(summary_screen2, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen2, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_errorbar(aes(ymin = ci_lower_screen2, ymax = ci_upper_screen2), width = 0.25, position = position_dodge(0.9)) +\n  labs(\n    title = \"Donation Rates by Treatment Arms\",\n    x = \"Treatment Arms\",\n    y = \"Donation Rate (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(donation_rate_screen2_plot)\n\n\n\n\n\n\n\n\n\n5 donors, 5 non-donors, with signal sent;\n\n\n\nCode\n# colnames(pilot_data)\n\n# Create new variables to count the number of 'Donate' and 'Do not donate'\n# Assuming the correct column names are 'Screen_3_donated' and 'Screen_3_notdonated'\nscreen_3 &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate_screen3 = sum(grepl(\"2.0\", c_across(starts_with(\"Screen_3\")), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_screen3 = sum(grepl(\"1.0\", c_across(starts_with(\"Screen_3\")), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_screen3 &lt;- screen_3 %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate_screen3 = sum(num_donate_screen3),\n    num_not_donate_screen3 = sum(num_not_donate_screen3),\n\n    # Calculate the donation rate\n    donation_rate_screen3 = num_donate_screen3 / (num_donate_screen3 + num_not_donate_screen3),\n\n    # Calculate the confidence intervals for the donation rate\n    # ci_screen3 = list(prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),\n    # ci_lower_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[1],\n    # ci_upper_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[2]\n    \n    ci_screen3 = list(binom.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),\n    ci_lower_screen3 = ci_screen3[[1]][1],  # Extract lower bound\n    ci_upper_screen3 = ci_screen3[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate_screen3 = round(donation_rate_screen3 * 100, 2),\n    ci_lower_screen3 = round(ci_lower_screen3 * 100, 2),\n    ci_upper_screen3 = round(ci_upper_screen3 * 100, 2)\n  ) %&gt;%\n  ungroup()\n\n# Create a bar plot using ggplot2\ndonation_rate_screen3_plot &lt;- ggplot(summary_screen3, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen3, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_errorbar(aes(ymin = ci_lower_screen3, ymax = ci_upper_screen3), width = 0.25, position = position_dodge(0.9)) +\n  labs(\n    title = \"Donation Rates by Treatment Arms\",\n    x = \"Treatment Arms\",\n    y = \"Donation Rate (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(donation_rate_screen3_plot)\n\n\n\n\n\n\n\n\n\n5 donors, 5 non-donors, without signal sent;\n\n\n\nCode\n# Create new variables to count the number of 'Donate' and 'Do not donate'\nscreen_4 &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate_screen4 = sum(grepl(\"2.0\", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_screen4 = sum(grepl(\"1.0\", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_screen4 &lt;- screen_4 %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate_screen4 = sum(num_donate_screen4),\n    num_not_donate_screen4 = sum(num_not_donate_screen4),\n    \n    # Calculate the donation rate\n    donation_rate_screen4 = num_donate_screen4 / (num_donate_screen4 + num_not_donate_screen4),\n    \n    # Calculate the confidence intervals for the donation rate\n    # ci_screen4 = list(prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),\n    # ci_lower_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[1],\n    # ci_upper_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[2]\n    \n    ci_screen4 = list(binom.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),\n    ci_lower_screen4 = ci_screen4[[1]][1],  # Extract lower bound\n    ci_upper_screen4 = ci_screen4[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate_screen4 = round(donation_rate_screen4 * 100, 2),\n    ci_lower_screen4 = round(ci_lower_screen4 * 100, 2),\n    ci_upper_screen4 = round(ci_upper_screen4 * 100, 2)\n  ) %&gt;%\n  ungroup()\n\n# Create a bar plot using ggplot2\ndonation_rate_screen4_plot &lt;- ggplot(summary_screen4, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen4, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_errorbar(aes(ymin = ci_lower_screen4, ymax = ci_upper_screen4), width = 0.25, position = position_dodge(0.9)) +\n  labs(\n    title = \"Donation Rates by Treatment Arms\",\n    x = \"Treatment Arms\",\n    y = \"Donation Rate (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(donation_rate_screen4_plot)\n\n\n\n\n\n\n\n\n\n9 donors, 1 non-donors, with signal sent;\n\n\n\nCode\n# Create new variables to count the number of 'Donate' and 'Do not donate'\nscreen_5 &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate_screen5 = sum(grepl(\"2.0\", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_screen5 = sum(grepl(\"1.0\", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_screen5 &lt;- screen_5 %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate_screen5 = sum(num_donate_screen5),\n    num_not_donate_screen5 = sum(num_not_donate_screen5),\n    \n    # Calculate the donation rate\n    donation_rate_screen5 = num_donate_screen5 / (num_donate_screen5 + num_not_donate_screen5),\n    \n    # Calculate the confidence intervals for the donation rate\n    # ci_screen5 = list(prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),\n    # ci_lower_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[1],\n    # ci_upper_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[2]\n    \n    ci_screen5 = list(binom.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),\n    ci_lower_screen5 = ci_screen5[[1]][1],  # Extract lower bound\n    ci_upper_screen5 = ci_screen5[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate_screen5 = round(donation_rate_screen5 * 100, 2),\n    ci_lower_screen5 = round(ci_lower_screen5 * 100, 2),\n    ci_upper_screen5 = round(ci_upper_screen5 * 100, 2)\n  ) %&gt;%\n  ungroup()\n\n# Create a bar plot using ggplot2\ndonation_rate_screen5_plot &lt;- ggplot(summary_screen5, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen5, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_errorbar(aes(ymin = ci_lower_screen5, ymax = ci_upper_screen5), width = 0.25, position = position_dodge(0.9)) +\n  labs(\n    title = \"Donation Rates by Treatment Arms\",\n    x = \"Treatment Arms\",\n    y = \"Donation Rate (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(donation_rate_screen5_plot)\n\n\n\n\n\n\n\n\n\n9 donors, 1 non-donors, without signal sent;\n\n\n\nCode\n# Create new variables to count the number of 'Donate' and 'Do not donate'\nscreen_6 &lt;- pilot_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_not_donate_screen6 = sum(grepl(\"2.0\", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_screen6 = sum(grepl(\"1.0\", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms\nsummary_screen6 &lt;- screen_6 %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_donate_screen6 = sum(num_donate_screen6),\n    num_not_donate_screen6 = sum(num_not_donate_screen6),\n    \n    # Calculate the donation rate\n    donation_rate_screen6 = num_donate_screen6 / (num_donate_screen6 + num_not_donate_screen6),\n    \n    # Calculate the confidence intervals for the donation rate\n    # ci_screen6 = list(prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),\n    # ci_lower_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[1],\n    # ci_upper_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[2]\n    \n    ci_screen6 = list(binom.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),\n    ci_lower_screen6 = ci_screen6[[1]][1],  # Extract lower bound\n    ci_upper_screen6 = ci_screen6[[1]][2]   # Extract upper bound\n  ) %&gt;%\n  mutate(\n    donation_rate_screen6 = round(donation_rate_screen6 * 100, 2),\n    ci_lower_screen6 = round(ci_lower_screen6 * 100, 2),\n    ci_upper_screen6 = round(ci_upper_screen6 * 100, 2)\n  ) %&gt;%\n  ungroup()\n\n# Create a bar plot using ggplot2\ndonation_rate_screen6_plot &lt;- ggplot(summary_screen6, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen6, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_errorbar(aes(ymin = ci_lower_screen6, ymax = ci_upper_screen6), width = 0.25, position = position_dodge(0.9)) +\n  labs(\n    title = \"Donation Rates by Treatment Arms\",\n    x = \"Treatment Arms\",\n    y = \"Donation Rate (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(donation_rate_screen6_plot)"
  },
  {
    "objectID": "experiment_pilot2_summary.html#summary-of-total-donation-rate",
    "href": "experiment_pilot2_summary.html#summary-of-total-donation-rate",
    "title": "Experiment Pilot 2 Summary",
    "section": "Summary of Total Donation Rate",
    "text": "Summary of Total Donation Rate\n\n\nCode\n# Keep Part 2 and Part 3 question responses\npilot_data_filtered &lt;- pilot_data %&gt;%\n  select(DefaultStatus, BuySignal, OverturnCondition, WugRole, p2_q1, p2_q2, p2_q3, Screen_1_donated:Screen_6_notdonated, num_donate, num_not_donate)\n\n# Create two new variables to show the total number of 1 and 2 responses for p2_q1, p2_q2, and p2_q3\npilot_data_filtered &lt;- pilot_data_filtered %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    num_p2_1 = sum(grepl(\"1.0\", c(p2_q1, p2_q2, p2_q3), ignore.case = TRUE), na.rm = TRUE),\n    num_p2_2 = sum(grepl(\"2.0\", c(p2_q1, p2_q2, p2_q3), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_signal = sum(grepl(\"1.0\", c_across(c(Screen_1_donated, Screen_1_notdonated, starts_with(\"Screen_3\"), Screen_5_donated, Screen_5_notdonated)), ignore.case = TRUE), na.rm = TRUE),\n    num_not_donate_signal = sum(grepl(\"2.0\", c_across(c(Screen_1_donated, Screen_1_notdonated, starts_with(\"Screen_3\"), Screen_5_donated, Screen_5_notdonated)), ignore.case = TRUE), na.rm = TRUE),\n    num_donate_no_signal = sum(grepl(\"1.0\", c_across(c(Screen_2_donated, Screen_2_notdonated, Screen_4_donated, Screen_4_notdonated, Screen_6_donated, Screen_6_notdonated)), ignore.case = TRUE), na.rm = TRUE),\n    num_not_donate_no_signal = sum(grepl(\"2.0\", c_across(c(Screen_2_donated, Screen_2_notdonated, Screen_4_donated, Screen_4_notdonated, Screen_6_donated, Screen_6_notdonated)), ignore.case = TRUE), na.rm = TRUE)\n  )\n\n# Group by DefaultStatus, BuySignal, OverturnCondition and show the percentage of sending signal(1) and not sending signal(2) for each treatment arms\n# Show the total number of 1 and 2 responses for Screen_1, Screen_3 and Screen 5\n# Show the total number of 1 and 2 responses for Screen_2, Screen_4 and Screen 6\nsummary_total &lt;- pilot_data_filtered %&gt;%\n  group_by(DefaultStatus, BuySignal, OverturnCondition) %&gt;%\n  summarise(\n    num_p2_1 = sum(num_p2_1),\n    num_p2_2 = sum(num_p2_2),\n    num_donate_signal = sum(num_donate_signal),\n    num_not_donate_signal = sum(num_not_donate_signal),\n    num_donate_no_signal = sum(num_donate_no_signal),\n    num_not_donate_no_signal = sum(num_not_donate_no_signal),\n    \n    # Calculate the percentage of sending signal(1) and not sending signal(2)\n    # Calculate the donation rate for sending signal and not sending signal\n    p2_1_rate = num_p2_1 / (num_p2_1 + num_p2_2),\n    p2_2_rate = num_p2_2 / (num_p2_1 + num_p2_2),\n    donation_rate_signal = num_donate_signal / (num_donate_signal + num_not_donate_signal),\n    donation_rate_no_signal = num_donate_no_signal / (num_donate_no_signal + num_not_donate_no_signal)\n  ) %&gt;%\n  ungroup()\n\n# Calculate the total donation rate: p2_1_rate * donation_rate_signal + p2_2_rate * donation_rate_no_signal\nsummary_total &lt;- summary_total %&gt;%\n  mutate(\n    total_donation_rate = paste0(round((p2_1_rate * donation_rate_signal + p2_2_rate * donation_rate_no_signal)*100,2),\"%\"))\n\n\n\n\nCode\n# Use a table to show Part2: the rate of sending signal, not sending signal, Part3: the donation rate for sending signal, not sending signal, and the total donation rate for each treatment arm\nsummary_total&lt;-summary_total %&gt;%\n  select(DefaultStatus, BuySignal, OverturnCondition, p2_1_rate, p2_2_rate, donation_rate_signal, donation_rate_no_signal, total_donation_rate) %&gt;%\n  mutate(\n    p2_1_rate = paste0(round(p2_1_rate * 100, 2), \"%\"),\n    p2_2_rate = paste0(round(p2_2_rate * 100, 2), \"%\"),\n    donation_rate_signal = paste0(round(donation_rate_signal * 100, 2), \"%\"),\n    donation_rate_no_signal = paste0(round(donation_rate_no_signal * 100, 2), \"%\")\n  ) %&gt;%\n  rename(`Part 2 Sending Signal Rate` = p2_1_rate,\n         `Part 2 Not Sending Signal Rate` = p2_2_rate,\n         `Part 3 Donation Rate (Signal)` = donation_rate_signal,\n         `Part 3 Donation Rate (No Signal)` = donation_rate_no_signal,\n         `Total Donation Rate` = total_donation_rate)\n\n# Use kable to show the table\nkable(summary_total, format = \"html\", caption = \"Summary of Total Donation Rate\")\n\n\n\nSummary of Total Donation Rate\n\n\nDefaultStatus\nBuySignal\nOverturnCondition\nPart 2 Sending Signal Rate\nPart 2 Not Sending Signal Rate\nPart 3 Donation Rate (Signal)\nPart 3 Donation Rate (No Signal)\nTotal Donation Rate\n\n\n\n\ndonated\n25 tokens\n1 token\n45.45%\n54.55%\n27.27%\n42.42%\n35.54%\n\n\ndonated\n25 tokens\n19 tokens\n53.33%\n46.67%\n10%\n63.33%\n34.89%\n\n\ndonated\n75 tokens\n1 token\n18.52%\n81.48%\n18.52%\n33.33%\n30.59%\n\n\ndonated\n75 tokens\n19 tokens\n22.22%\n77.78%\n14.81%\n73.08%\n60.13%\n\n\nnot donated\n25 tokens\n1 token\n47.22%\n52.78%\n77.78%\n44.44%\n60.19%\n\n\nnot donated\n25 tokens\n19 tokens\n28.57%\n71.43%\n80.95%\n42.86%\n53.74%\n\n\nnot donated\n75 tokens\n1 token\n30%\n70%\n86.67%\n46.67%\n58.67%\n\n\nnot donated\n75 tokens\n19 tokens\n42.42%\n57.58%\n81.82%\n45.45%\n60.88%"
  }
]