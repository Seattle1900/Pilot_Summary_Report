---
title: "Experiment Pilot 2 Summary"
author: "Yetong Xu"
---

```{r import, message=FALSE}
#| code-fold: true


library(dplyr)
library(tidyr)
library(readxl)
library(knitr)
library(ggplot2)
library(plotly)
library(Hmisc)
```

```{r}
#| code-fold: true

# Import data
pilot_data <- read_excel("Opt_Experiment_Pilot2.xlsx")

# Keep the rows from 194 to 273
pilot_data <- pilot_data[194:273, ]

```

## Data Cleaning

```{r message=FALSE}
#| code-fold: true

# Remove rows with name_wug contains 'Yetong'

pilot_data <- pilot_data %>%
#  filter(!grepl("Yetong", name_wug)) %>%
  # Remove rows with missing values for all p2_q1, p2_q2, p2_q3
  #filter(!is.na(p2_q1) | !is.na(p2_q2) | !is.na(p2_q3)) %>%
  # Remove the rows with Q57 == 2
  filter((Q57 != '2.0') | (!is.na(Q57)))

# Print the shape of the cleaned data, use a sentence
print(paste("The cleaned data has", nrow(pilot_data), "rows and", ncol(pilot_data), "columns."))
```

## Summary of Treatment Arms

```{r message=FALSE}
#| code-fold: true

# Use a table to show the distribution of treatment arms
pilot_data %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(count = n()) %>%
  kable(caption = "Summary of treatment arms")
```

## Summary of Assigned Family

We find that most participants, no matter which treatment arm they are in, are assigned to the *Kandinsky* family.

```{r message=FALSE}
#| code-fold: true

# pilot_data %>%
#   filter(is.na(Assigned_Family))

# Use bar plot to show Assigned_Family across different treatment arms
family_summary <- pilot_data %>%
  ggplot(aes(x = Assigned_Family, fill = Assigned_Family)) +
  geom_bar() +
  facet_grid(DefaultStatus ~ BuySignal + OverturnCondition) +
  labs(title = "Assigned Family across different treatment arms", x = "Assigned Family", y = "Count") +
  theme_minimal()

ggplotly(family_summary)
```

## Summary of Part 2

***Note:***

-   **Part 2 Q1:** There is a 10% chance that you are a wug donor and a 90% chance that you are a wug non-donor.
-   **Part 2 Q2:** There is a 50% chance that you are a wug donor and a 50% chance that you are a wug non-donor.
-   **Part 2 Q3:** There is a 90% chance that you are a wug donor and a 10% chance that you are a wug non-donor.

```{r build_summary_p2, message=FALSE}
#| code-fold: true

# Group by DefaultStatus, BuySignal, and OverturnCondition and count occurrences of Yes and No for each question
summary_p2 <- pilot_data %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    p2q1_1 = sum(p2_q1 == '1.0', na.rm = TRUE),
    p2q1_2 = sum(p2_q1 == '2.0', na.rm = TRUE),
    p2q2_1 = sum(p2_q2 == '1.0', na.rm = TRUE),
    p2q2_2 = sum(p2_q2 == '2.0', na.rm = TRUE),
    p2q3_1 = sum(p2_q3 == '1.0', na.rm = TRUE),
    p2q3_2 = sum(p2_q3 == '2.0', na.rm = TRUE),
    n_total = n()
  ) %>%
  pivot_longer(cols = starts_with("p2q"), 
               names_to = c("Question", "Response"),
               names_sep = "_",
               values_to = "Count") %>%
  mutate(
    Proportion = Count / n_total,
    ci = purrr::map2(Count, n_total, ~binom.test(.x, .y)$conf.int),
    #ci = purrr::map2(Count, n_total, ~prop.test(.x, .y)$conf.int),
    ci_lower = purrr::map_dbl(ci, 1),
    ci_upper = purrr::map_dbl(ci, 2)
  ) %>%
  select(-ci)

# Convert Response to factor for better plotting
summary_p2$Response <- factor(summary_p2$Response, levels = c("1", "2"), labels = c("Yes", "No"))
```

::: panel-tabset
### Donated, 25 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_1 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 25 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_1)
```

### Donated, 25 Tokens, 9 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_4 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 25 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_4)
```

### Donated, 75 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_2 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 75 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_2)
```

### Donated, 75 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_3 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Donated, 75 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_3)
```

### Not Donated, 25 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_4 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 25 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_4)
```

### Not Donated, 25 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_5 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='25 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 25 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_5)
```

### Not Donated, 75 Tokens, 1 Token

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_6 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='1 token'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 75 Tokens, 1 Token",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_6)
```

### Not Donated, 75 Tokens, 19 Tokens

```{r message=FALSE}
#| code-fold: true

# Plot using ggplot2
p2_plot_7 <- ggplot(summary_p2 %>%
                            filter(DefaultStatus=='not donated'&
                                     BuySignal=='75 tokens'&
                                     OverturnCondition=='19 tokens'), 
                          aes(x = Question, y = Proportion, fill = Response)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~DefaultStatus + BuySignal + OverturnCondition, scales = "free", ncol = 3) +
  labs(
    title = "Not Donated, 75 Tokens, 19 Tokens",
    x = "Proportion of Yes and No Responses for Each Question in Part2",
    y = "Proportion of Responses"
  ) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), 
                position = position_dodge(0.9), width = 0.25) +
  theme_minimal() +
  scale_fill_manual(values = c("Yes" = "#00BFC4", "No" = "#F8766D")) +
  theme(panel.spacing = unit(1.5, "lines"))

# Convert ggplot to plotly
ggplotly(p2_plot_7)
```
:::

## Summary of Part 3

In this section, I'll show the donation rates for each treatment arm. The donation rate is calculated as the number of 'Donate' responses divided by the total number of responses for each treatment arm.

```{r build_summary_p3, message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
pilot_data <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate = sum(grepl("2.0", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate = sum(grepl("1.0", c_across(Screen_1_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_p3 <- pilot_data %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate = sum(num_donate),
    num_not_donate = sum(num_not_donate),
    
    # Calculate the donation rate
    donation_rate = num_donate / (num_donate + num_not_donate),
    
    # Calculate the confidence intervals for the donation rate
    #ci = list(prop.test(num_donate, num_donate + num_not_donate)$conf.int),
    #ci_lower = prop.test(num_donate, num_donate + num_not_donate)$conf.int[1],
    #ci_upper = prop.test(num_donate, num_donate + num_not_donate)$conf.int[2]
    
     # Calculate confidence intervals for the donation rate using binom.test()
    ci = list(binom.test(num_donate, num_donate + num_not_donate)$conf.int),
    ci_lower = ci[[1]][1],  # Extract lower bound
    ci_upper = ci[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate = round(donation_rate * 100, 2),
    ci_lower = round(ci_lower * 100, 2),
    ci_upper = round(ci_upper * 100, 2)
  ) %>%
  ungroup() %>%
  select(-ci)

# Create a bar plot using ggplot2
# donation_rate_plot <- ggplot(summary_p3, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
#   geom_bar(stat = "identity", position = "dodge") +
#   geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.25, position = position_dodge(0.9)) +
#   labs(
#     title = "Donation Rates by Treatment Arms",
#     x = "Treatment Arms",
#     y = "Donation Rate (%)"
#   ) +
#   theme_minimal() +
#   theme(legend.position = "none", 
#         axis.text.x = element_text(angle = 45, hjust = 1))
# 
# ggplotly(donation_rate_plot)
```

::: panel-tabset
### Screen 1

-   1 donor, 9 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_1 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen1 = sum(grepl("2.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen1 = sum(grepl("1.0", c_across(Screen_1_donated:Screen_1_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen1 <- screen_1 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen1 = sum(num_donate_screen1),
    num_not_donate_screen1 = sum(num_not_donate_screen1),
    
    # Calculate the donation rate
    donation_rate_screen1 = num_donate_screen1 / (num_donate_screen1 + num_not_donate_screen1),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen1 = list(prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),
    # ci_lower_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[1],
    # ci_upper_screen1 = prop.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int[2]
    # 
    ci_screen1 = list(binom.test(num_donate_screen1, num_donate_screen1 + num_not_donate_screen1)$conf.int),
    ci_lower_screen1 = ci_screen1[[1]][1],  # Extract lower bound
    ci_upper_screen1 = ci_screen1[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen1 = round(donation_rate_screen1 * 100, 2),
    ci_lower_screen1 = round(ci_lower_screen1 * 100, 2),
    ci_upper_screen1 = round(ci_upper_screen1 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen1_plot <- ggplot(summary_screen1, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen1, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen1, ymax = ci_upper_screen1), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen1_plot)
```

### Screen 2

-   1 donor, 9 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_2 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen2 = sum(grepl("2.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen2 = sum(grepl("1.0", c_across(Screen_2_donated:Screen_2_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen2 <- screen_2 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen2 = sum(num_donate_screen2),
    num_not_donate_screen2 = sum(num_not_donate_screen2),
    
    # Calculate the donation rate
    donation_rate_screen2 = num_donate_screen2 / (num_donate_screen2 + num_not_donate_screen2),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen2 = list(prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),
    # ci_lower_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[1],
    # ci_upper_screen2 = prop.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int[2]
    
    ci_screen2 = list(binom.test(num_donate_screen2, num_donate_screen2 + num_not_donate_screen2)$conf.int),
    ci_lower_screen2 = ci_screen2[[1]][1],  # Extract lower bound
    ci_upper_screen2 = ci_screen2[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen2 = round(donation_rate_screen2 * 100, 2),
    ci_lower_screen2 = round(ci_lower_screen2 * 100, 2),
    ci_upper_screen2 = round(ci_upper_screen2 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen2_plot <- ggplot(summary_screen2, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen2, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen2, ymax = ci_upper_screen2), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen2_plot)
```

### Screen 3

-   5 donors, 5 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# colnames(pilot_data)

# Create new variables to count the number of 'Donate' and 'Do not donate'
# Assuming the correct column names are 'Screen_3_donated' and 'Screen_3_notdonated'
screen_3 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen3 = sum(grepl("2.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen3 = sum(grepl("1.0", c_across(starts_with("Screen_3")), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()


# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen3 <- screen_3 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen3 = sum(num_donate_screen3),
    num_not_donate_screen3 = sum(num_not_donate_screen3),

    # Calculate the donation rate
    donation_rate_screen3 = num_donate_screen3 / (num_donate_screen3 + num_not_donate_screen3),

    # Calculate the confidence intervals for the donation rate
    # ci_screen3 = list(prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),
    # ci_lower_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[1],
    # ci_upper_screen3 = prop.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int[2]
    
    ci_screen3 = list(binom.test(num_donate_screen3, num_donate_screen3 + num_not_donate_screen3)$conf.int),
    ci_lower_screen3 = ci_screen3[[1]][1],  # Extract lower bound
    ci_upper_screen3 = ci_screen3[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen3 = round(donation_rate_screen3 * 100, 2),
    ci_lower_screen3 = round(ci_lower_screen3 * 100, 2),
    ci_upper_screen3 = round(ci_upper_screen3 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen3_plot <- ggplot(summary_screen3, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen3, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen3, ymax = ci_upper_screen3), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen3_plot)
```

### Screen 4

-   5 donors, 5 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_4 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen4 = sum(grepl("2.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen4 = sum(grepl("1.0", c_across(Screen_4_donated:Screen_4_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen4 <- screen_4 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen4 = sum(num_donate_screen4),
    num_not_donate_screen4 = sum(num_not_donate_screen4),
    
    # Calculate the donation rate
    donation_rate_screen4 = num_donate_screen4 / (num_donate_screen4 + num_not_donate_screen4),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen4 = list(prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),
    # ci_lower_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[1],
    # ci_upper_screen4 = prop.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int[2]
    
    ci_screen4 = list(binom.test(num_donate_screen4, num_donate_screen4 + num_not_donate_screen4)$conf.int),
    ci_lower_screen4 = ci_screen4[[1]][1],  # Extract lower bound
    ci_upper_screen4 = ci_screen4[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen4 = round(donation_rate_screen4 * 100, 2),
    ci_lower_screen4 = round(ci_lower_screen4 * 100, 2),
    ci_upper_screen4 = round(ci_upper_screen4 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen4_plot <- ggplot(summary_screen4, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen4, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen4, ymax = ci_upper_screen4), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen4_plot)
```

### Screen 5

-   9 donors, 1 non-donors, with signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_5 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen5 = sum(grepl("2.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen5 = sum(grepl("1.0", c_across(Screen_5_donated:Screen_5_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen5 <- screen_5 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen5 = sum(num_donate_screen5),
    num_not_donate_screen5 = sum(num_not_donate_screen5),
    
    # Calculate the donation rate
    donation_rate_screen5 = num_donate_screen5 / (num_donate_screen5 + num_not_donate_screen5),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen5 = list(prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),
    # ci_lower_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[1],
    # ci_upper_screen5 = prop.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int[2]
    
    ci_screen5 = list(binom.test(num_donate_screen5, num_donate_screen5 + num_not_donate_screen5)$conf.int),
    ci_lower_screen5 = ci_screen5[[1]][1],  # Extract lower bound
    ci_upper_screen5 = ci_screen5[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen5 = round(donation_rate_screen5 * 100, 2),
    ci_lower_screen5 = round(ci_lower_screen5 * 100, 2),
    ci_upper_screen5 = round(ci_upper_screen5 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen5_plot <- ggplot(summary_screen5, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen5, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen5, ymax = ci_upper_screen5), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen5_plot)
```

### Screen 6

-   9 donors, 1 non-donors, without signal sent;

```{r message=FALSE}
#| code-fold: true

# Create new variables to count the number of 'Donate' and 'Do not donate'
screen_6 <- pilot_data %>%
  rowwise() %>%
  mutate(
    num_not_donate_screen6 = sum(grepl("2.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE),
    num_donate_screen6 = sum(grepl("1.0", c_across(Screen_6_donated:Screen_6_notdonated), ignore.case = TRUE), na.rm = TRUE)
  ) %>%
  ungroup()

# Group by DefaultStatus, BuySignal, OverturnCondition and show the donation rate for each treatment arms
summary_screen6 <- screen_6 %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_donate_screen6 = sum(num_donate_screen6),
    num_not_donate_screen6 = sum(num_not_donate_screen6),
    
    # Calculate the donation rate
    donation_rate_screen6 = num_donate_screen6 / (num_donate_screen6 + num_not_donate_screen6),
    
    # Calculate the confidence intervals for the donation rate
    # ci_screen6 = list(prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),
    # ci_lower_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[1],
    # ci_upper_screen6 = prop.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int[2]
    
    ci_screen6 = list(binom.test(num_donate_screen6, num_donate_screen6 + num_not_donate_screen6)$conf.int),
    ci_lower_screen6 = ci_screen6[[1]][1],  # Extract lower bound
    ci_upper_screen6 = ci_screen6[[1]][2]   # Extract upper bound
  ) %>%
  mutate(
    donation_rate_screen6 = round(donation_rate_screen6 * 100, 2),
    ci_lower_screen6 = round(ci_lower_screen6 * 100, 2),
    ci_upper_screen6 = round(ci_upper_screen6 * 100, 2)
  ) %>%
  ungroup()

# Create a bar plot using ggplot2
donation_rate_screen6_plot <- ggplot(summary_screen6, aes(x = interaction(DefaultStatus, BuySignal, OverturnCondition), y = donation_rate_screen6, fill = interaction(DefaultStatus, BuySignal, OverturnCondition))) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = ci_lower_screen6, ymax = ci_upper_screen6), width = 0.25, position = position_dodge(0.9)) +
  labs(
    title = "Donation Rates by Treatment Arms",
    x = "Treatment Arms",
    y = "Donation Rate (%)"
  ) +
  theme_minimal() +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(donation_rate_screen6_plot)
```
:::

## Summary of Total Donation Rate

```{r message=FALSE}
#| code-fold: true

# Keep Part 2 and Part 3 question responses
pilot_data_filtered <- pilot_data %>%
  select(DefaultStatus, BuySignal, OverturnCondition, WugRole, p2_q1, p2_q2, p2_q3, Screen_1_donated:Screen_6_notdonated, num_donate, num_not_donate)

# Create two new variables to show the total number of 1 and 2 responses for p2_q1, p2_q2, and p2_q3
pilot_data_filtered <- pilot_data_filtered %>%
  rowwise() %>%
  mutate(
    num_p2_1 = sum(grepl("1.0", c(p2_q1, p2_q2, p2_q3), ignore.case = TRUE), na.rm = TRUE),
    num_p2_2 = sum(grepl("2.0", c(p2_q1, p2_q2, p2_q3), ignore.case = TRUE), na.rm = TRUE),
    num_donate_signal = sum(grepl("1.0", c_across(c(Screen_1_donated, Screen_1_notdonated, starts_with("Screen_3"), Screen_5_donated, Screen_5_notdonated)), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_signal = sum(grepl("2.0", c_across(c(Screen_1_donated, Screen_1_notdonated, starts_with("Screen_3"), Screen_5_donated, Screen_5_notdonated)), ignore.case = TRUE), na.rm = TRUE),
    num_donate_no_signal = sum(grepl("1.0", c_across(c(Screen_2_donated, Screen_2_notdonated, Screen_4_donated, Screen_4_notdonated, Screen_6_donated, Screen_6_notdonated)), ignore.case = TRUE), na.rm = TRUE),
    num_not_donate_no_signal = sum(grepl("2.0", c_across(c(Screen_2_donated, Screen_2_notdonated, Screen_4_donated, Screen_4_notdonated, Screen_6_donated, Screen_6_notdonated)), ignore.case = TRUE), na.rm = TRUE)
  )

# Group by DefaultStatus, BuySignal, OverturnCondition and show the percentage of sending signal(1) and not sending signal(2) for each treatment arms
# Show the total number of 1 and 2 responses for Screen_1, Screen_3 and Screen 5
# Show the total number of 1 and 2 responses for Screen_2, Screen_4 and Screen 6
summary_total <- pilot_data_filtered %>%
  group_by(DefaultStatus, BuySignal, OverturnCondition) %>%
  summarise(
    num_p2_1 = sum(num_p2_1),
    num_p2_2 = sum(num_p2_2),
    num_donate_signal = sum(num_donate_signal),
    num_not_donate_signal = sum(num_not_donate_signal),
    num_donate_no_signal = sum(num_donate_no_signal),
    num_not_donate_no_signal = sum(num_not_donate_no_signal),
    
    # Calculate the percentage of sending signal(1) and not sending signal(2)
    # Calculate the donation rate for sending signal and not sending signal
    p2_1_rate = num_p2_1 / (num_p2_1 + num_p2_2),
    p2_2_rate = num_p2_2 / (num_p2_1 + num_p2_2),
    donation_rate_signal = num_donate_signal / (num_donate_signal + num_not_donate_signal),
    donation_rate_no_signal = num_donate_no_signal / (num_donate_no_signal + num_not_donate_no_signal)
  ) %>%
  ungroup()

# Calculate the total donation rate: p2_1_rate * donation_rate_signal + p2_2_rate * donation_rate_no_signal
summary_total <- summary_total %>%
  mutate(
    total_donation_rate = paste0(round((p2_1_rate * donation_rate_signal + p2_2_rate * donation_rate_no_signal)*100,2),"%"))
```

```{r}
#| code-fold: true

# Use a table to show Part2: the rate of sending signal, not sending signal, Part3: the donation rate for sending signal, not sending signal, and the total donation rate for each treatment arm
summary_total<-summary_total %>%
  select(DefaultStatus, BuySignal, OverturnCondition, p2_1_rate, p2_2_rate, donation_rate_signal, donation_rate_no_signal, total_donation_rate) %>%
  mutate(
    p2_1_rate = paste0(round(p2_1_rate * 100, 2), "%"),
    p2_2_rate = paste0(round(p2_2_rate * 100, 2), "%"),
    donation_rate_signal = paste0(round(donation_rate_signal * 100, 2), "%"),
    donation_rate_no_signal = paste0(round(donation_rate_no_signal * 100, 2), "%")
  ) %>%
  rename(`Part 2 Sending Signal Rate` = p2_1_rate,
         `Part 2 Not Sending Signal Rate` = p2_2_rate,
         `Part 3 Donation Rate (Signal)` = donation_rate_signal,
         `Part 3 Donation Rate (No Signal)` = donation_rate_no_signal,
         `Total Donation Rate` = total_donation_rate)

# Use kable to show the table
kable(summary_total, format = "html", caption = "Summary of Total Donation Rate")
```
